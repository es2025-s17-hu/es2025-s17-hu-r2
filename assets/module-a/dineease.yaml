openapi: 3.0.0
info:
  title: DineEase Backend API
  version: 1.0.0
  description: Backend services for the DineEase platform, providing functionalities for restaurants, users, plans, login, and payment.

paths:
  /restaurants:
    get:
      summary: Get a list of all restaurants
      responses:
        '200':
          description: A list of restaurants.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Restaurant'
    post:
      summary: Create a new restaurant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Restaurant'
      responses:
        '201':
          description: Restaurant created.

  /restaurants/{id}:
    get:
      summary: Get a restaurant by ID along with its reviews
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the restaurant to retrieve
      responses:
        '200':
          description: A restaurant object along with reviews
          content:
            application/json:
              schema:
                type: object
                properties:
                  restaurant:
                    $ref: '#/components/schemas/Restaurant'
                  reviews:
                    type: array
                    items:
                      $ref: '#/components/schemas/Review'
        '404':
          description: Restaurant not found    

  /restaurants/{id}:
    put:
      summary: Update a restaurant by ID
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
              required:
                - image
      responses:
        '200':
          description: Restaurant updated.
    delete:
      summary: Delete a restaurant by ID
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: Restaurant deleted.

  /users:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created.

  /users/login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: User logged in.

  /plans:
    get:
      summary: Get available plans
      responses:
        '200':
          description: A list of available plans.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plan'

  /plans/{id}:
    put:
      summary: Update a plan by ID
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Plan'
      responses:
        '200':
          description: Plan updated.

  /payment:
    post:
      summary: Process a payment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
      responses:
        '200':
          description: Payment processed.

  /roles:
    get:
      summary: Get a list of all user roles
      responses:
        '200':
          description: A list of user roles.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Roles'

components:
  schemas:
    Restaurant:
      type: object
      properties:
        restaurant_id:
          type: integer
          format: int64
        name:
          type: string
        city:
          type: string
        cuisine:
          type: string
        address:
          type: string
        zipCode:
          type: string
        countryCode:
          type: string
      required:
        - id

    Review:
      type: object
      properties:
        id:
          type: integer
          format: int64
        restaurantId:
          type: integer
          format: int64
        name:
          type: string
        rating:
          type: number
          format: float
        comment:
          type: string
      required:
        - id

    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
      required:
        - id

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        roleId:
          type: integer
          format: int64
      required:
        - id

